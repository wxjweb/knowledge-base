(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{400:function(e,t,a){"use strict";a.r(t);var n=a(43),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("ul",[a("li",[a("a",{attrs:{href:"#git%e5%88%9b%e5%bb%ba%e6%9c%ac%e5%9c%b0%e5%88%86%e6%94%af%e5%b9%b6%e5%85%b3%e8%81%94%e8%bf%9c%e7%a8%8b%e5%88%86%e6%94%af"}},[e._v("Git创建本地分支并关联远程分支")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%e5%88%9b%e5%bb%ba%e6%9c%ac%e5%9c%b0%e5%88%86%e6%94%af"}},[e._v("创建本地分支")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%e5%88%87%e6%8d%a2%e5%88%b0%e6%9c%ac%e5%9c%b0%e5%88%86%e6%94%af"}},[e._v("切换到本地分支")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%e5%88%9b%e5%bb%ba%e6%9c%ac%e5%9c%b0%e5%88%86%e6%94%af%e5%b9%b6%e5%88%87%e6%8d%a2"}},[e._v("创建本地分支并切换")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%e6%8f%90%e4%ba%a4%e6%9c%ac%e5%9c%b0%e5%88%86%e6%94%af%e5%88%b0%e8%bf%9c%e7%a8%8b%e4%bb%93%e5%ba%93"}},[e._v("提交本地分支到远程仓库")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%e6%96%b0%e5%bb%ba%e6%9c%ac%e5%9c%b0%e5%88%86%e6%94%af%e4%b8%8e%e8%bf%9c%e7%a8%8b%e5%88%86%e6%94%af%e5%85%b3%e8%81%94"}},[e._v("新建本地分支与远程分支关联")])])])])]),e._v(" "),a("h2",{attrs:{id:"git创建本地分支并关联远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git创建本地分支并关联远程分支"}},[e._v("#")]),e._v(" Git创建本地分支并关联远程分支")]),e._v(" "),a("h3",{attrs:{id:"创建本地分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建本地分支"}},[e._v("#")]),e._v(" 创建本地分支")]),e._v(" "),a("ul",[a("li",[e._v("git branch 分支名"),a("br"),e._v("\n例如：git branch dev，这条命令是基于当前分支创建的本地分支，假设当前分支是master(远程分支)，则是基于master分支创建的本地分支dev。")])]),e._v(" "),a("h3",{attrs:{id:"切换到本地分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切换到本地分支"}},[e._v("#")]),e._v(" 切换到本地分支")]),e._v(" "),a("ul",[a("li",[e._v("git checkout 分支名"),a("br"),e._v("\n例如：git checkout dev，这条.j命令表示从当前master分支切换到dev分支。")])]),e._v(" "),a("h3",{attrs:{id:"创建本地分支并切换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建本地分支并切换"}},[e._v("#")]),e._v(" 创建本地分支并切换")]),e._v(" "),a("ul",[a("li",[e._v("git checkout -b 分支名"),a("br"),e._v("\n例如：git checkout -b dev，这条命令把创建本地分支和切换到该分支的功能结合起来了，即基于当前分支master创建本地分支dev并切换到该分支下。")])]),e._v(" "),a("h3",{attrs:{id:"提交本地分支到远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交本地分支到远程仓库"}},[e._v("#")]),e._v(" 提交本地分支到远程仓库")]),e._v(" "),a("ul",[a("li",[e._v("git push origin 本地分支名"),a("br"),e._v("\n例如：git push origin dev，这条命令表示把本地dev分支提交到远程仓库，即创建了远程分支dev。"),a("br"),e._v("\n注：要想和其他人分享某个本地分支，你需要把它推送到一个你拥有写权限的远程仓库。你创建的本地分支不会因为你的写入操作而被自动同步到你引入的远程服务器上，你需要明确地执行推送分支的操作。换句话说，对于无意分享的分支，你尽管保留为私人分支好了，而只推送那些协同工作要用到的特性分支。")])]),e._v(" "),a("h3",{attrs:{id:"新建本地分支与远程分支关联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新建本地分支与远程分支关联"}},[e._v("#")]),e._v(" 新建本地分支与远程分支关联")]),e._v(" "),a("ul",[a("li",[e._v("git branch –-set-upstream 本地新建分支名 origin/远程分支名"),a("br"),e._v("\n例如：git branch –set-upstream dev origin/dev，把本地dev分支和远程dev分支相关联。"),a("br"),e._v("\n注：本地新建分支， push到远程服务器上之后，使用git pull或者git pull 拉取或提交数据时会报错，必须使用命令：git pull origin dev（指定远程分支）；如果想直接使用git pull或git push拉去提交数据就必须创建本地分支与远程分支的关联。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("wang@PC01 MINGW64 /e/at/project-docs (master)\n$ git branch –set-upstream develop origin/develop\nusage: git branch [<options>] [-r | -a] [--merged | --no-merged]\n   or: git branch [<options>] [-l] [-f] <branch-name> [<start-point>]\n   or: git branch [<options>] [-r] (-d | -D) <branch-name>...\n   or: git branch [<options>] (-m | -M) [<old-branch>] <new-branch>\n   or: git branch [<options>] (-c | -C) [<old-branch>] <new-branch>\n   or: git branch [<options>] [-r | -a] [--points-at]\n   or: git branch [<options>] [-r | -a] [--format]\n\nGeneric options\n    -v, --verbose         show hash and subject, give twice for upstream branch\n    -q, --quiet           suppress informational messages\n    -t, --track           set up tracking mode (see git-pull(1))\n    -u, --set-upstream-to <upstream>\n                          change the upstream info\n    --unset-upstream      Unset the upstream info\n    --color[=<when>]      use colored output\n    -r, --remotes         act on remote-tracking branches\n    --contains <commit>   print only branches that contain the commit\n    --no-contains <commit>\n                          print only branches that don't contain the commit\n    --abbrev[=<n>]        use <n> digits to display SHA-1s\n\nSpecific git-branch actions:\n    -a, --all             list both remote-tracking and local branches\n    -d, --delete          delete fully merged branch\n    -D                    delete branch (even if not merged)\n    -m, --move            move/rename a branch and its reflog\n    -M                    move/rename a branch, even if target exists\n    -c, --copy            copy a branch and its reflog\n    -C                    copy a branch, even if target exists\n    -l, --list            list branch names\n    --create-reflog       create the branch's reflog\n    --edit-description    edit the description for the branch\n    -f, --force           force creation, move/rename, deletion\n    --merged <commit>     print only branches that are merged\n    --no-merged <commit>  print only branches that are not merged\n    --column[=<style>]    list branches in columns\n    --sort <key>          field name to sort on\n    --points-at <object>  print only branches of the object\n    -i, --ignore-case     sorting and filtering are case insensitive\n    --format <format>     format to use for the output\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);