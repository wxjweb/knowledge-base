(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{365:function(t,e,n){"use strict";n.r(e);var s=n(43),i=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"背景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),n("p",[t._v("PostgreSQL 9.5 引入了一项新功能，UPSERT(insert on conflict do)，当插入遇到约束错误时，直接返回，或者改为执行UPDATE。")]),t._v(" "),n("h3",{attrs:{id:"语法如下"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#语法如下"}},[t._v("#")]),t._v(" 语法如下")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Command:     INSERT  \nDescription: create new rows in a table  \nSyntax:  \n[ WITH [ RECURSIVE ] with_query [, ...] ]  \nINSERT INTO table_name [ AS alias ] [ ( column_name [, ...] ) ]  \n    { DEFAULT VALUES | VALUES ( { expression | DEFAULT } [, ...] ) [, ...] | query }  \n    [ ON CONFLICT [ conflict_target ] conflict_action ]  \n    [ RETURNING * | output_expression [ [ AS ] output_name ] [, ...] ]  \n  \nwhere conflict_target can be one of:  \n  \n    ( { index_column_name | ( index_expression ) } [ COLLATE collation ] [ opclass ] [, ...] ) [ WHERE index_predicate ]  \n    ON CONSTRAINT constraint_name  \n  \nand conflict_action is one of:  \n  \n    DO NOTHING  \n    DO UPDATE SET { column_name = { expression | DEFAULT } |  \n                    ( column_name [, ...] ) = ( { expression | DEFAULT } [, ...] ) |  \n                    ( column_name [, ...] ) = ( sub-SELECT )  \n                  } [, ...]  \n              [ WHERE condition ]  \n")])])]),n("p",[t._v("PostgreSQL 9.5以前的版本，可以通过函数，或者with语法来实现UPSERT类似的功能。")]),t._v(" "),n("h3",{attrs:{id:"_9-5-upsert用法举例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-5-upsert用法举例"}},[t._v("#")]),t._v(" 9.5+ UPSERT用法举例")]),t._v(" "),n("p",[t._v("创建一张测试表，其中一个字段为唯一键或者主键。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("create table test(id int primary key, info text, crt_time timestamp);  \n")])])]),n("ol",[n("li",[t._v("不存在则插入，存在则更新")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("test03=# insert into test values (1,'test',now()) on conflict (id) do update set info=excluded.info,crt_time=excluded.crt_time;  \nINSERT 0 1  \n  \ntest03=# select * from test;  \n id | info |          crt_time            \n----+------+----------------------------  \n  1 | test | 2017-04-24 15:27:25.393948  \n(1 row)  \n  \ntest03=# insert into test values (1,'hello digoal',now()) on conflict (id) do update set info=excluded.info,crt_time=excluded.crt_time;  \nINSERT 0 1  \n  \ntest03=# select * from test;  \n id |     info     |          crt_time            \n----+--------------+----------------------------  \n  1 | hello digoal | 2017-04-24 15:27:39.140877  \n(1 row)  \n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("不存在则插入，存在则直接返回(不做任何处理)")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("test03=# insert into test values (1,'hello digoal',now()) on conflict (id) do nothing;  \nINSERT 0 0  \ntest03=# insert into test values (1,'pu',now()) on conflict (id) do nothing;  \nINSERT 0 0  \ntest03=# insert into test values (2,'pu',now()) on conflict (id) do nothing;  \nINSERT 0 1  \ntest03=# select * from test;  \n id |     info     |          crt_time            \n----+--------------+----------------------------  \n  1 | hello digoal | 2017-04-24 15:27:39.140877  \n  2 | pu           | 2017-04-24 15:28:20.37392  \n(2 rows)  \n")])])]),n("h3",{attrs:{id:"_9-5-upsert用法举例-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-5-upsert用法举例-2"}},[t._v("#")]),t._v(" 9.5- UPSERT用法举例")]),t._v(" "),n("p",[t._v("用户可以根据实际需求，使用不同的方法")]),t._v(" "),n("ol",[n("li",[t._v("函数")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("test03=# create or replace function f_upsert(int,text,timestamp) returns void as $$  \ndeclare  \n  res int;  \nbegin  \n  update test set info=$2,crt_time=$3 where id=$1;  \n  if not found then  \n    insert into test (id,info,crt_time) values ($1,$2,$3);  \n  end if;  \n  exception when others then  \n    return;  \nend;  \n$$ language plpgsql strict;  \nCREATE FUNCTION  \n  \ntest03=# select f_upsert(1,'digoal',now()::timestamp);  \n f_upsert   \n----------  \n   \n(1 row)  \n  \ntest03=# select * from test;  \n id |  info  |          crt_time            \n----+--------+----------------------------  \n  2 | pu     | 2017-04-24 15:28:20.37392  \n  1 | digoal | 2017-04-24 15:31:29.254325  \n(2 rows)  \n  \ntest03=# select f_upsert(1,'digoal001',now()::timestamp);  \n f_upsert   \n----------  \n   \n(1 row)  \n  \ntest03=# select * from test;  \n id |   info    |         crt_time            \n----+-----------+---------------------------  \n  2 | pu        | 2017-04-24 15:28:20.37392  \n  1 | digoal001 | 2017-04-24 15:31:38.0529  \n(2 rows)  \n  \ntest03=# select f_upsert(3,'hello',now()::timestamp);  \n f_upsert   \n----------  \n   \n(1 row)  \n  \ntest03=# select * from test;  \n id |   info    |         crt_time            \n----+-----------+---------------------------  \n  2 | pu        | 2017-04-24 15:28:20.37392  \n  1 | digoal001 | 2017-04-24 15:31:38.0529  \n  3 | hello     | 2017-04-24 15:31:49.14291  \n(3 rows)  \n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("WITH语法，用法1")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("create table test(id int primary key, info text, crt_time timestamp); \n")])])]),n("p",[t._v("存在则更新，不存在则插入。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("with upsert as (update test set info=$info,crt_time=$crt_time where id=$id returning *) insert into test select $id,$info,$crt_time where not exists (select 1 from upsert where id=$id); \n")])])]),n("p",[t._v("替换变量，进行测试")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("with upsert as (update test set info='test',crt_time=now() where id=1 returning *) insert into test select 1,'test',now() where not exists (select 1 from upsert where id=1);    \n")])])]),n("p",[t._v("同时插入一条不存在的值，只有一个会话成功，另一个会话会报PK约束错误。")]),t._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[t._v("WITH语法，用法2")])]),t._v(" "),n("p",[t._v("即使表没有PK或者唯一约束，也能保证并发。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("create table test(id int, info text, crt_time timestamp);  \n")])])]),n("p",[t._v("3.1 对于记录不存在，可以保证只有一个session插入数据，对于同一条数据更新，先来的session会lock着记录，后来的session会wait。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("with     \n  w1 as(select ('x'||substr(md5('$id'),1,16))::bit(64)::bigint as tra_id),    \n  upsert as (update test set info=$info,crt_time=$crt_time where id=$id returning *)    \n  insert into test select $id, $info, $crt_time from w1     \n    where pg_try_advisory_xact_lock(tra_id) and not exists (select 1 from upsert where id=$id);    \n")])])]),n("p",[t._v("替换变量，进行测试")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("with     \n  w1 as(select ('x'||substr(md5('1'),1,16))::bit(64)::bigint as tra_id),    \n  upsert as (update test set info='digoal0123',crt_time=now() where id=1 returning *)    \n  insert into test select 1, 'digoal0123', now() from w1     \n    where pg_try_advisory_xact_lock(tra_id) and not exists (select 1 from upsert where id=1);    \n  \nINSERT 0 0  \n  \ntest03=# select * from test;  \n id |    info    |         crt_time            \n----+------------+---------------------------  \n  2 | pu         | 2017-04-24 15:28:20.37392  \n  3 | hello      | 2017-04-24 15:31:49.14291  \n  1 | digoal0123 | 2017-04-24 15:31:38.0529  \n(3 rows)  \n  \nwith     \n  w1 as(select ('x'||substr(md5('4'),1,16))::bit(64)::bigint as tra_id),    \n  upsert as (update test set info='digoal0123',crt_time=now() where id=4 returning *)    \n  insert into test select 4, 'digoal0123', now() from w1     \n    where pg_try_advisory_xact_lock(tra_id) and not exists (select 1 from upsert where id=4);    \n  \nINSERT 0 1  \n  \ntest03=# select * from test;  \n id |    info    |          crt_time            \n----+------------+----------------------------  \n  2 | pu         | 2017-04-24 15:28:20.37392  \n  3 | hello      | 2017-04-24 15:31:49.14291  \n  1 | digoal0123 | 2017-04-24 15:31:38.0529  \n  4 | digoal0123 | 2017-04-24 15:38:39.801908  \n(4 rows)  \n")])])]),n("p",[t._v("3.2 对于记录不存在，可以保证只有一个session插入数据，对于同一条数据更新，先来的session会更新数据，后来的session不等待，直接失败。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("with w1 as(select ('x'||substr(md5('$id'),1,16))::bit(64)::bigint as tra_id),    \n  upsert as (update test set info=$info,crt_time=$crt_time from w1 where pg_try_advisory_xact_lock(tra_id) and id=$id returning *)    \n  insert into test select $id,$info,$crt_time from w1   \n    where pg_try_advisory_xact_lock(tra_id) and not exists (select 1 from upsert where id=$id);     \n")])])]),n("p",[t._v("替换变量，进行测试")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("with w1 as(select ('x'||substr(md5('1'),1,16))::bit(64)::bigint as tra_id),    \n  upsert as (update test set info='test',crt_time=now() from w1 where pg_try_advisory_xact_lock(tra_id) and id=1 returning *)    \n  insert into test select 1,'test',now() from w1   \n    where pg_try_advisory_xact_lock(tra_id) and not exists (select 1 from upsert where id=1);    \n  \nINSERT 0 0  \n  \ntest03=# select * from test;  \n id |    info    |          crt_time            \n----+------------+----------------------------  \n  2 | pu         | 2017-04-24 15:28:20.37392  \n  3 | hello      | 2017-04-24 15:31:49.14291  \n  4 | digoal0123 | 2017-04-24 15:42:50.912887  \n  1 | test       | 2017-04-24 15:44:44.245167  \n(4 rows)  \n")])])])])}),[],!1,null,null,null);e.default=i.exports}}]);